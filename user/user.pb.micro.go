// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user/user.proto

package user

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Authentication service

func NewAuthenticationEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Authentication service

type AuthenticationService interface {
	Login(ctx context.Context, in *User, opts ...client.CallOption) (*User, error)
}

type authenticationService struct {
	c    client.Client
	name string
}

func NewAuthenticationService(name string, c client.Client) AuthenticationService {
	return &authenticationService{
		c:    c,
		name: name,
	}
}

func (c *authenticationService) Login(ctx context.Context, in *User, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.name, "Authentication.Login", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Authentication service

type AuthenticationHandler interface {
	Login(context.Context, *User, *User) error
}

func RegisterAuthenticationHandler(s server.Server, hdlr AuthenticationHandler, opts ...server.HandlerOption) error {
	type authentication interface {
		Login(ctx context.Context, in *User, out *User) error
	}
	type Authentication struct {
		authentication
	}
	h := &authenticationHandler{hdlr}
	return s.Handle(s.NewHandler(&Authentication{h}, opts...))
}

type authenticationHandler struct {
	AuthenticationHandler
}

func (h *authenticationHandler) Login(ctx context.Context, in *User, out *User) error {
	return h.AuthenticationHandler.Login(ctx, in, out)
}
